<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<description>Spring-common公共配置</description>
	<!-- 启用AOP注解 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- <context:property-placeholder ignore-unresolvable="true" location="classpath*:application-jdbc-demo.properties"/> -->

	<!-- 配置注解类型的Bean扫描 -->
	<context:annotation-config />
	<context:component-scan base-package="cn.simple" />




	<!-- <bean class="com.kyj.kjf.common.datasource.BeanPostPrcessorImpl" /> -->

	<!-- 多数据源配置 -->
	<!-- <bean id="dataSource" class="com.kyj.kjf.common.datasource.TradingRoutingDataSource"> -->
	<!-- <property name="targetDataSources"> -->
	<!-- <map key-type="java.lang.String"> -->
	<!-- </map> -->
	<!-- </property> -->
	<!-- common里只定义一个默认数据源 -->
	<!-- <property name="defaultTargetDataSource" ref="readUserDataSource"></property> -->
	<!-- </bean> -->

	<!-- mybatis 配置start -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.kyj.**.domain" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath*:com/kyj/**/mappers/*Mapper.xml" />
		<!-- 加入page的拦截器 -->
		<!-- <property name="plugins"> <ref bean="paginationInterceptor" /> </property> -->
		<!-- <property name="plugins"> -->
		<!-- <array> -->
		<!-- <bean class="com.github.pagehelper.PageHelper"> -->
		<!-- <property name="properties"> -->
		<!-- <value> -->
		<!-- dialect=mysql -->
		<!-- </value> -->
		<!-- </property> -->
		<!-- </bean> -->
		<!-- </array> -->
		<!-- </property> -->
	</bean>

	<!-- mybatis的page拦截器 -->
	<!-- <bean id="paginationInterceptor" class="com.kyj.kjf.common.interceptor.PaginationInterceptor"> 
		<property name="pageSqlId" value=".*Pager.*" /> <property name="saveSqlId" 
		value=".*save.*" /> </bean> -->

	<!-- <bean id="exceptionCheckServiceInterceptor" -->
	<!-- class="com.kyj.kjf.common.interceptor.ExceptionLogServiceInterceptor" 
		/> -->

	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> -->
	<!-- <property name="basePackage" value="com.kyj.**.dao" /> -->
	<!-- <property name="annotationClass" -->
	<!-- value="com.kyj.kjf.common.annotation.MyBatisRepository" /> -->
	<!-- </bean> -->

	<!--org.mybatis.spring.SqlSessionTemplate -->
	<!-- <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" -->
	<!-- scope="prototype"> -->
	<!-- <constructor-arg index="0" ref="sqlSessionFactory" /> -->
	<!-- <constructor-arg index="1" value="SIMPLE" /> -->
	<!-- </bean> -->
	<!-- 使用annotation定义事务 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" -->
	<!-- proxy-target-class="true" order="200" /> -->
	<!-- <bean id="transactionManager" -->
	<!-- class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> -->
	<!-- <property name="dataSource" ref="dataSource" /> -->
	<!-- </bean> -->
	<!-- <bean id="dataSourceBeforeAdvice" class="com.kyj.kjf.common.datasource.DataSourceBeforeAdvice"></bean> -->
	<!-- <bean id="datasourceAfterAdvice" class="com.kyj.kjf.common.datasource.DataSourceAfterAdvice"></bean> -->

	<!-- <aop:config proxy-target-class="true"> -->
	<!-- <aop:advisor advice-ref="dataSourceBeforeAdvice" order="100" -->
	<!-- pointcut="execution(* com.kyj.*.service..*.*(..))" /> -->
	<!-- </aop:config> -->

	<!-- <aop:config proxy-target-class="true"> -->
	<!-- <aop:advisor advice-ref="datasourceAfterAdvice" order="400" -->
	<!-- pointcut="execution(* com.kyj.*.service..*.*(..))" /> -->
	<!-- </aop:config> -->

	<!-- <bean id="springContextUtil" class="com.kyj.kjf.common.util.SpringContextUtil" 
		/> -->

	<!-- <aop:config> -->
	<!-- <aop:pointcut id="serviceCheckPointcut" expression="execution(* com.kyj..*Service*.*(..))" 
		/> -->
	<!-- <aop:aspect id="aroundServiceCheckInterceptor" ref="exceptionCheckServiceInterceptor"> -->
	<!-- <aop:around pointcut-ref="serviceCheckPointcut" method="logging" /> -->
	<!-- </aop:aspect> -->
	<!-- </aop:config> -->


</beans>